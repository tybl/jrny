#include <toml++/toml.h>

#include <pwd.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>

#include <chrono>
#include <ctime>
#include <filesystem>
#include <iostream>
#include <span>

auto does_file_exist(std::string const& filename) {
  struct stat buffer;
  return (stat (filename.c_str(), &buffer) == 0);
}

auto get_home_path() -> std::filesystem::path {
   char const* home_path = nullptr;
   if (nullptr == (home_path = getenv("HOME"))) {
      home_path = getpwuid(getuid())->pw_dir;
   }
   return std::filesystem::path(home_path);
}

auto get_config_path(std::string const& app_name) -> std::filesystem::path {
   std::filesystem::path result;
   char const* config_path_cstr = getenv("XDG_CONFIG_HOME");
   if (nullptr != config_path_cstr) {
      result = config_path_cstr;
   } else {
      result = std::filesystem::path(get_home_path()) / ".config";
   }
   result /= app_name;
   return result;
}

auto main(int argc, const char* argv[]) -> int {
   auto args = std::span(argv, argc);
   // TODO(tybl): Replace hardcoded app name with string generated by cmake
   auto config_path = get_config_path("jrny");
   config_path /= "config.toml";
   auto config = toml::parse_file(config_path.native());

   // TODO(tybl): Start output with the current date/time
   auto now = std::chrono::system_clock::now();
   const std::time_t t_c = std::chrono::system_clock::to_time_t(now);
   std::cout << std::put_time(std::localtime(&t_c), "%F %T:");
   for (auto arg : args) {
      std::cout << " " << arg;
   }
   std::string filename = config["journal"]["filename"].value_or("");
   std::cout << " > " << filename << std::endl;
   return 0;
}
